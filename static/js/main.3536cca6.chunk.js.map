{"version":3,"sources":["helpers/api.ts","components/User.tsx","components/Comment.tsx","components/CommentList.tsx","components/Post.tsx","components/PostList.tsx","components/LoadButton.tsx","App.tsx","index.tsx"],"names":["API_URL","getPosts","a","fetch","response","json","getComments","getUsers","getPreparedPosts","Promise","all","posts","users","comments","map","post","user","find","currentUser","userId","id","filter","comment","postId","User","name","email","address","className","href","city","street","suite","Comment","body","CommentList","currentComment","key","Post","title","PostList","useState","query","setQuery","filterQuery","setFilterQuery","visiblePosts","useMemo","pattern","RegExp","test","setFilterQueryWithDebounce","useCallback","debounce","htmlFor","type","value","onChange","event","target","currentPost","LoadButton","loadPosts","setTitle","isLoading","setIsLoading","disabled","onClick","setTimeout","App","setPosts","isLoaded","setIsLoaded","preparedPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3536cca6.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com';\n\nexport const getPosts = async (): Promise<PostFromServer[]> => {\n  const response = await fetch(`${API_URL}/posts`);\n\n  return response.json();\n};\n\nexport const getComments = async (): Promise<Comment[]> => {\n  const response = await fetch(`${API_URL}/comments`);\n\n  return response.json();\n};\n\nexport const getUsers = async (): Promise<User[]> => {\n  const response = await fetch(`${API_URL}/users`);\n\n  return response.json();\n};\n\nexport const getPreparedPosts = async (): Promise<Post[]> => {\n  const [posts,\n    users,\n    comments,\n  ] = await Promise.all([getPosts(), getUsers(), getComments()]);\n\n  return posts.map(post => ({\n    ...post,\n    user: users.find(currentUser => post.userId === currentUser.id) as User,\n    comments: comments.filter(comment => post.id === comment.postId) as Comment[],\n  }));\n};\n","import React from 'react';\n\nexport const User: React.FC<User> = ({ name, email, address }) => (\n  <div className=\"post__user user\">\n    <p className=\"user__name\">\n      {name}\n    </p>\n    <a href={`mailto:${email}`} className=\"user__email\">\n      {email}\n    </a>\n    <address className=\"user__address\">\n      <span>\n        {`${address.city}, ${address.street}, ${address.suite}`}\n      </span>\n    </address>\n  </div>\n);\n","import React from 'react';\n\nexport const Comment: React.FC<Comment> = ({ name, body, email }) => (\n  <li className=\"post__comment comment\">\n    <p className=\"comment__name\">\n      {name}\n    </p>\n    <p className=\"comment__body\">\n      {body}\n    </p>\n    <a href={`mailto:${email}`} className=\"comment__email\">\n      {email}\n    </a>\n  </li>\n);\n","import React from 'react';\nimport { Comment } from './Comment';\n\ntype Props = {\n  comments: Comment[];\n};\n\nexport const CommentList: React.FC<Props> = ({ comments }) => (\n  <ul className=\"post__comments\">\n    {comments.map(currentComment => (\n      <Comment {...currentComment} key={currentComment.id} />\n    ))}\n  </ul>\n);\n","import React from 'react';\nimport { User } from './User';\nimport { CommentList } from './CommentList';\n\nexport const Post: React.FC<Post> = ({\n  title, body, user, comments,\n}) => (\n  <article className=\"post\">\n    <h2 className=\"post__title\">\n      {title}\n    </h2>\n    <p className=\"post__body\">\n      {body}\n    </p>\n    <User {...user} />\n    <p>\n      <strong>Comments:</strong>\n    </p>\n    <CommentList comments={comments} />\n  </article>\n);\n","import React, { useState, useMemo, useCallback } from 'react';\nimport debounce from 'lodash/debounce';\nimport { Post } from './Post';\n\ntype Props = {\n  posts: Post[];\n};\n\nexport const PostList: React.FC<Props> = ({ posts }) => {\n  const [query, setQuery] = useState<string>('');\n  const [filterQuery, setFilterQuery] = useState<string>('');\n\n  const visiblePosts = useMemo(() => {\n    const pattern = new RegExp(filterQuery, 'i');\n\n    return posts.filter(({ body, title }) => pattern.test(body + title));\n  }, [posts, filterQuery]);\n\n  const setFilterQueryWithDebounce = useCallback(\n    debounce(setFilterQuery, 1000),\n    [],\n  );\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    setFilterQueryWithDebounce(event.target.value);\n  };\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"input-field col s6 offset-s3\">\n          <label htmlFor=\"search\">\n            Search for posts\n            <input\n              id=\"search\"\n              type=\"text\"\n              className=\"validate\"\n              value={query}\n              onChange={handleChange}\n            />\n          </label>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"posts\">\n          {visiblePosts.map(currentPost => (\n            <Post {...currentPost} key={currentPost.id} />\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { useState } from 'react';\n\ntype Props = {\n  loadPosts: () => void;\n};\n\nexport const LoadButton: React.FC<Props> = ({ loadPosts }) => {\n  const [title, setTitle] = useState<string>('Load');\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const loading = () => {\n    setTitle('Loading...');\n    setIsLoading(true);\n\n    setTimeout(() => {\n      loadPosts();\n    }, 1000);\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className=\"waves-effect waves-light btn-large\"\n      disabled={isLoading}\n      onClick={loading}\n    >\n      {title}\n    </button>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { getPreparedPosts } from './helpers/api';\nimport { PostList } from './components/PostList';\nimport { LoadButton } from './components/LoadButton';\n\nconst App = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n\n  async function loadPosts() {\n    const preparedPosts = await getPreparedPosts();\n\n    setPosts(preparedPosts);\n    setIsLoaded(true);\n  }\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"row center-align\">Dynamic list of Posts</h1>\n      {!isLoaded ? (\n        <div className=\"row center-align\">\n          <LoadButton loadPosts={loadPosts} />\n        </div>\n      ) : (\n        <div className=\"row\">\n          <div className=\"col s12\">\n            <PostList posts={posts} />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}